name: Deploy backend to EC2 (publish)

on:
  push:
    branches: [publish]
  workflow_dispatch:

env:
  APP_DIR: backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # ------ BUILD IN ./backend ------
      - name: Install deps (backend)
        working-directory: ./${{ env.APP_DIR }}
        run: npm ci

      - name: Build (backend)
        working-directory: ./${{ env.APP_DIR }}
        run: npm run build

      - name: Verify build produced dist/
        working-directory: ./${{ env.APP_DIR }}
        run: |
          ls -la
          test -d dist || { echo "::error::No dist/ folder. Fix your build script."; exit 1; }

      # ------ PACKAGE FROM ./backend ------
      - name: Create deploy.tgz (dist + package files)
        run: |
          # archive contents will unpack to EC2_PATH/ with these top-level entries:
          #   dist/  package.json  package-lock.json  env.production.example
          tar -czf deploy.tgz -C ${{ env.APP_DIR }} dist package.json package-lock.json env.production.example
          ls -lh deploy.tgz

      # ------ ENSURE TARGET DIR & PERMS ------
      - name: Ensure target dir on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            sudo mkdir -p "${{ secrets.EC2_PATH }}"
            sudo chown -R $USER:$USER "${{ secrets.EC2_PATH }}"
            ls -ld "${{ secrets.EC2_PATH }}"

      # ------ UPLOAD ------
      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "deploy.tgz"
          target: "${{ secrets.EC2_PATH }}"

      # ------ DEPLOY ON EC2 ------
      - name: Extract, install prod deps, (re)start PM2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -e
            cd "${{ secrets.EC2_PATH }}"
            ls -la
            tar -xzf deploy.tgz
            rm -f deploy.tgz

            # Install production dependencies
            npm ci --omit=dev

            # Set up environment if .env doesn't exist
            if [ ! -f .env ]; then
              echo "Setting up production environment..."
              cp env.production.example .env
              echo "Please edit .env file with your production values and restart the service"
            fi

            # Start/restart the service with PM2
            if command -v pm2 >/dev/null 2>&1; then
              if pm2 describe skillin >/dev/null 2>&1; then
                echo "Reloading existing PM2 process..."
                pm2 reload skillin
              else
                echo "Starting new PM2 process..."
                pm2 start dist/server.js --name skillin --env production
              fi
              pm2 save
              pm2 list
            else
              echo "PM2 not found; install it (npm i -g pm2) or switch to systemd."
              echo "You can start the app manually with: node dist/server.js"
            fi
            ls -la

      # Optional sanity ping (adjust if your app/port differ)
      - name: Health check (best-effort)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            curl -fsS http://127.0.0.1:3000/health || true
