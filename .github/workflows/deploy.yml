name: Deploy backend to EC2 (publish)

on:
  push:
    branches: [publish]
  workflow_dispatch:

env:
  APP_DIR: backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # environment: Production   # <-- uncomment if your repo secrets live under an Environment

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: List backend
        run: ls -la "${{ env.APP_DIR }}"

      - name: Install deps (backend)
        working-directory: ./backend
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            echo "No package-lock.json; using npm install"
            npm install --no-audit --no-fund
          fi

      - name: Build (backend)
        working-directory: ./backend
        run: npm run build

      - name: Verify dist exists
        working-directory: ./backend
        run: |
          ls -la dist || true
          test -d dist || { echo "::error::No dist/ folder. Fix your build script."; exit 1; }

      - name: Create deploy.tgz
        shell: bash
        run: |
          FILES="dist package.json"
          [ -f backend/package-lock.json ] && FILES="$FILES package-lock.json"
          [ -f backend/env.production.example ] && FILES="$FILES env.production.example"
          tar -czf deploy.tgz -C backend $FILES
          echo "Tar preview:"; tar -tzf deploy.tgz | sed -n '1,60p'

      # ---- Decode Base64 SSH key into a workflow output (no files needed) ----
      - name: Decode SSH key
        id: key
        shell: bash
        run: |
          echo 'pem<<EOF' >> "$GITHUB_OUTPUT"
          echo "${{ secrets.EC2_KEY_B64 }}" | base64 -d >> "$GITHUB_OUTPUT"
          echo 'EOF' >> "$GITHUB_OUTPUT"

      # Optional: quick probe using the ssh-action
      - name: Probe SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ steps.key.outputs.pem }}
          script: echo "EC2_OK $(hostname)"

      - name: Ensure target dir on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ steps.key.outputs.pem }}
          script: |
            sudo mkdir -p "${{ secrets.EC2_PATH }}"
            sudo chown -R $USER:$USER "${{ secrets.EC2_PATH }}"
            ls -ld "${{ secrets.EC2_PATH }}"

      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ steps.key.outputs.pem }}
          source: "deploy.tgz"
          target: "${{ secrets.EC2_PATH }}"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ steps.key.outputs.pem }}
          script: |
            set -e
            cd "${{ secrets.EC2_PATH }}"
            echo "Before extract:" && ls -la
            tar -xzf deploy.tgz && rm -f deploy.tgz
            echo "After extract:" && ls -la

            if [ -f package-lock.json ]; then
              npm ci --omit=dev --no-audit --no-fund
            else
              npm install --omit=dev --no-audit --no-fund
            fi

            ENTRY=$(node -p "try{require('./package.json').main||''}catch(e){''}")
            if [ -z "$ENTRY" ] || [ ! -f "$ENTRY" ]; then
              for f in dist/server.js dist/src/server.js dist/index.js dist/app.js; do
                [ -f "$f" ] && ENTRY="$f" && break
              done
            fi
            [ -n "$ENTRY" ] && [ -f "$ENTRY" ] || { echo "No entry file found. Dist tree:"; ls -R dist || true; exit 1; }
            echo "Using entry file: $ENTRY"

            if command -v pm2 >/dev/null 2>&1; then
              pm2 describe skillin >/dev/null 2>&1 && pm2 reload skillin || pm2 start "$ENTRY" --name skillin
              pm2 save
              pm2 list
            else
              echo "PM2 not found; install it (npm i -g pm2) or use systemd."
              exit 1
            fi

      - name: Health check (best-effort)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ steps.key.outputs.pem }}
          script: |
            curl -fsS http://127.0.0.1:3000/health || true
